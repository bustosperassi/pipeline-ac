#Lista de instrucciones que contemplan este trabajo

= Introduction =

Para comenzar con el trabajo practico necesitamos saber cuales son las instrucciones que entran en juego en el pipeline. Una vez hecho esto podemos comenzar primero por un parser que verifique el estado de las instrucciones (si están correctamente escritas), para luego ejecutarlas con el pipeline.

= Instrucciones =

== Tipo I ==
=== LB (Load byte) ===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 0 0 0 0|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato* LB rt,offset(base)

*Propósito*: Guarda un byte desde memoria a registro.

rt <- memory <base+offset>
----
=== LH (Load halfword) ===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 0 0 0 1|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato* LH rt,offset(base)

*Propósito*: Guarda una media palabra desde memoria a registro.

rt <- memory <base+offset>
----
=== LW (Load word) === 
{{{
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 0 0 1 1|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato*  LW rt,offset(base)

* Propósito*: Guarda una palabra desde memoria a registro.

rt <- memory <base+offset>
----
=== LWU (Load word unsigned) ===
{{{
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 0 1 1 1|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato*  LWU rt,offset(base)

* Propósito*: Guarda una palabra sin signo desde memoria a registro.

rt <- memory <base+offset>
----
=== LBU (Load byte unsigned) ===
{{{
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 0 0 0 0|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato* LBU rt,offset(base)

*Propósito*: Guarda un byte sin signo desde memoria a registro.

rt <- memory <base+offset>
----
=== LHU (Load halfword unsigned) ===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 0 0 0 1|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato* LHU rt,offset(base)

*Propósito*: Guarda una media palabra sin signo desde memoria a registro.

rt <- memory <base+offset>
----
===SB (store byte)===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 1 0 0 0|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato* SB rt,offset(base)

*Propósito* Guarda byte a memoria.

memory<base+offset> <- rt
----
=== SH(store halfword) ===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 1 0 0 1|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato* SH rt,offset(base)

*Propósito* Guarda media palabra en memoria.

memory<base+offset> <- rt
----
===SW(store word)===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|1 0 1 0 0 1|base     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Formato* SW rt,offset(base)

*Propósito* Guarda palabra en memoria.

memory<base+offset> <- rt

=== ADDI (Add Inmediate Word)===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 1 0 0 0|  rs     |  rt     |   inmediate                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}
*Formato* ADDI rt, rs, immediate

*Propósito* To add a constant to a 32-bit integer. If overflow occurs,then trap.

*Description* rt ← rs + immediate
----
=== ADDIU (Add Inmediate Word unsigned)===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 1 0 0 1|  rs     |  rt     |   inmediate                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}
*Formato* ADDIU rt, rs, immediate

*Propósito* To add a constant to a 32-bit integer. If overflow occurs,then trap.

*Description* rt ← rs + immediate
----
=== ANDI (And Inmediate)===
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 1 1 0 0|  rs     |  rt     |   inmediate                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

*Format* ANDI rt, rs, immediate

*Purpose* To do a bitwise logical AND with a constant.

*Description* rt ← rs AND immediate
----
ORI (OR Inmediate)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 1 1 0 1|  rs     |  rt     |   inmediate                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

Format: ORI rt, rs, immediate

Purpose To do a bitwise logical OR with a constant.

Description: rd ← rs OR immediate
----
XORI (Exclusive OR Immediate)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 1 1 1 0|  rs     |  rt     |   inmediate                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

Format: XORI rt, rs, immediate

Purpose: To do a bitwise logical EXCLUSIVE OR with a constant.

Description: rt ← rs XOR immediate
----
LUI(Load Upper Immediate)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 1 1 1 1|  rs     |  rt     |   inmediate                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}
Format: LUI rt, immediate

Purpose: To load a constant into the upper half of a word.

Description: rt ← immediate || 016
----
SLTI(Set on Less Than Immediate)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 1 0 1 0|  rs     |  rt     |   inmediate                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}
Format: SLTI rt, rs, immediate
Purpose: To record the result of a less-than comparison with a constant.
Description: rt ← (rs < immediate)
----
SLTIU (Set on Less Than Immediate Unsigned)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 1 0 1 1|  rs     |  rt     |   inmediate                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}
Format: SLTIU rt, rs, immediate

Purpose: To record the result of an unsigned less-than comparison with a constant.

Description: rt ← (rs < immediate)
----
BEQ(Branch on Equal)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 0 1 0 0|  rs     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

Format: BEQ rs, rt, offset

Purpose: To compare GPRs then do a PC-relative conditional branch.

Description: if (rs = rt) then branch
----
BNE(Branch on Not Equal)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 0 1 0 1|  rs     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}
Format: BNE rs, rt, offset

Purpose: To compare GPRs then do a PC-relative conditional branch.

Description: if (rs ≠ rt) then branch
----
J(Jump)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 0 0 1 0|  rs     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}

Format: J target

Purpose: To branch within the current 256 MB aligned region.
----
JAL(Jump And Link)
{{{ 
32                             16                               0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 0 0 0 1 1|  rs     |  rt     |   offset                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+----6------+---5-----+---5-----+---------------16--------------+
}}}


*Tipo J*
JR:
JALR:

*Tipo R*
SLL:
SRL:
SRA:
SLLV:
SRLV:
SRAV:
ADD:
ADDU:
SUB:
SUBU: 
AND:
OR:
XOR:
NOR:
SLT:
SLTU:
JR: